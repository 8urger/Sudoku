import math
yourBoard = [[0 for a in range(9)] for b in range(9)]
yourBoard[0][2]=8
yourBoard[0][5]=7
yourBoard[0][6]=5
yourBoard[0][7]=4
yourBoard[1][0]=4
yourBoard[1][3]=5
yourBoard[1][4]=2
yourBoard[1][6]=7
yourBoard[1][8]=9
yourBoard[2][3]=8
yourBoard[2][4]=3
yourBoard[3][1]=4
yourBoard[3][3]=2
yourBoard[3][5]=3
yourBoard[3][8]=8
yourBoard[4][1]=3
yourBoard[4][2]=7
yourBoard[4][4]=4
yourBoard[4][6]=2
yourBoard[4][7]=5
yourBoard[5][0]=5
yourBoard[5][3]=7
yourBoard[5][5]=9
yourBoard[5][7]=1
yourBoard[6][4]=7
yourBoard[6][5]=6
#yourBoard[6][6]=3 #delete this
yourBoard[7][0]=3
yourBoard[7][2]=5
yourBoard[7][4]=8
yourBoard[7][5]=2
yourBoard[7][8]=1
yourBoard[8][1]=2
yourBoard[8][2]=6
yourBoard[8][3]=9
yourBoard[8][6]=4


class Node:
	def __init__(self, data):
		self.data = data
		self.next = None

class linkedList:
	def __init__(self):
		self.head = None

	def print_list(self):
		cur_node = self.head
		while cur_node:
			print(cur_node.data)
			cur_node = cur_node.next

	def compare_num(self, x):
		cur_node = self.head
		while cur_node != None:
			y = cur_node.data
			if y == x:
				return True
			cur_node = cur_node.next
		return False

	def append(self, data):
		new_node = Node(data)

		if self.head is None:
			self.head = new_node
			return
		last_node = self.head
		while last_node.next:
			last_node = last_node.next
		last_node.next = new_node

class hashTable:
	def __init__(self, n):
		self.MAX=n
		self.arr = [None for i in range(self.MAX)]

	def get_hash(key, p, i, n, j, hash_value):
		pass

		#h = 0
		#for char in key:
	#		h+= ord(char)
#		return h % self.MAX #size of list here

	def __setitem__(self, key, val):
		#h = self.get_hash(key)
		self.arr[key]=val

	def __getitem__(self, key):
		#h = self.get_hash(key)
		return self.arr[key]

	def __delitem__(self, key):
		#h = self.get_hash(key)
		self.arr[h] = None

#	def iter_links(self):
#		current_node = self.head
#		while current_node:
#			return current_node
#			current_node = current_node.next_node



rows = [[0, 0, 0, 0, 0, 0, 0, 0, 0] for i in range(9)]
columns = [[0, 0, 0, 0, 0, 0, 0, 0, 0] for j in range(9)]
sector = [[0, 0, 0, 0, 0, 0, 0, 0, 0] for k in range(9)]
rowNaughts = [[1, 2, 3, 4, 5, 6, 7, 8, 9] for l in range(9)]
columnNaughts = [[1, 2, 3, 4, 5, 6, 7, 8, 9] for m in range(9)]
sectorNaughts = [[1, 2, 3, 4, 5, 6, 7, 8, 9] for n in range(9)]


for i in range(9):
	for j in range(9):
		rows[i][j] = yourBoard[i][j]
				
		#populates columns
for i in range(9):
	for j in range(9):
		columns[i][j] = yourBoard[j][i]

		#populates sectors
a = 0
for p in range(0, 9, 3):
	for n in range(0, 9, 3):
		b=-1
		for i in range(3):
			for j in range(3):
				b+=1
				sector[a][b] = yourBoard[(i+p)][(j+n)]
		a+=1

		#populate all naughts
for i in range(9):
	for j in range(9):
		if (sector[i][j] != 0):
			x = sector[i][j]
			sectorNaughts[i][(x-1)] = 0
for i in range(9):
	for j in range(9):
		if (rows[i][j] != 0):
			x = rows[i][j]
			rowNaughts[i][(x-1)] = 0
for i in range(9):
	for j in range(9):
		if (columns[i][j] != 0):
			x = columns[i][j]
			columnNaughts[i][(x-1)] = 0


hash_value = 0

for p in range(0, 9, 3):
	for n in range(0, 9, 3):
		for i in range(3):
			for j in range(3):
				if (yourBoard[(i+p)][(j+n)]==0):
					hash_value = hash_value+1


print("Here is my hash value")
print(hash_value)
hash_table = hashTable(hash_value)
#print(get_hash(2))
print("end")
print(45%hash_value)
print("end")

print("sector")
print(sector[8])

for p in range(0, 9, 3):
	for n in range(0, 9, 3):
		for i in range(3):
			for j in range(3):
				if (yourBoard[(i+p)][(j+n)]==0):
					linked = linkedList()
					for ii in range(9):
						x = yourBoard[i+p][ii]
						if ((x != 0)and linked.compare_num(x)==False):
							linked.append(x)
					for pp in range(9):
						y = yourBoard[pp][j+n]
						if ((y!=0) and (linked.compare_num(y))==False):
							linked.append(y)
					for kk in range(9):
						z = sector[(p+(math.floor((n/3))))]
						if (z[kk] != 0 and (linked.compare_num(z[kk]))==False):
							aa = z[kk]
							linked.append(aa)

				#save the linkedList to the hash map
				#this is printing correct, just twice
					xyz = (((p+i)*10)+(n+j))%(hash_value)
					hash_table[xyz] = linked

					


					#when it comes time to run this again, does it
					#make sense to create an ordered array to search through





print("Linked List")
linked.print_list()
print("Linked List")
print("Solver")
for i in range(9):
	print(yourBoard[i])

print(hash_value)
for i in range(hash_value):
	x =hash_table[i]
	#print(x)

#print(list(hash_table)
